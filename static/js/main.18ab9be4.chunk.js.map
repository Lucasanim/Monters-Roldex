{"version":3,"sources":["components/card/Card.component.js","components/card-list/card-list.component.js","components/search-field/Search-field.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","index","SearchField","onChange","e","onchange","type","placeholder","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFbC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACN,EAASO,GAAV,OAChB,cAAC,EAAD,CAAkBP,QAASA,GAAhBO,SCNdC,G,MAAc,SAACZ,GACxB,OAAO,uBACHC,UAAU,SACVY,SAAU,SAAAC,GAAC,OAAId,EAAMe,SAASD,IAC9BE,KAAK,SACLC,YAAY,sBCiCLC,G,wDAlCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXV,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEjB,SAAUgB,S,oBAG5C,WAAU,IAAD,SAC2BE,KAAKR,MAA/BV,EADD,EACCA,SAAUW,EADX,EACWA,YACZQ,EAAmBnB,EAASoB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYY,wBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEc,SAAU,SAACD,GAAD,OAAO,EAAKY,SAAS,CAAEN,YAAaN,EAAEmB,OAAOC,WAEzD,cAAC,EAAD,CACEzB,SAAUmB,W,GA7BFO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.18ab9be4.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.styles.css'\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n    )\n","import React from 'react'\nimport './card-list.styles.css'\n\nimport {Card} from '../card/Card.component'\n\nexport const CardList = (props) => {\n    return(\n        <div className='card-list' >\n            {props.monsters.map((monster, index )=>(\n                <Card key={index} monster={monster} />\n            ))\n            }\n        </div>\n    )\n}","import React from 'react'\nimport './Search-field.styles.css'\n\nexport const SearchField = (props) => {\n    return <input \n        className='search'\n        onChange={e => props.onchange(e)}\n        type='search'\n        placeholder='search monsters'\n    />\n}","import React, {Component} from 'react'\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchField } from './components/search-field/Search-field.component'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( users => this.setState({ monsters: users }) )\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roldex</h1>\n        <SearchField\n          onchange={(e) => this.setState({ searchField: e.target.value })}\n        />\n        <CardList\n          monsters={filteredMonsters}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}